2 types of polymorphism

compile time/static binding/early binding/->method overloading
during compilation, you will know how obj will behave whether it will perform based on your methods with parameters
example: you have 2 methods with the same name with different parameters and you create an obj calling those methods
and 1 method has 2 parameters -> void sum(int a, int b) when you call the method the method with 2 arguments, you will have to 
provide those arguments based on the amount of parameters
void sum(int a, int b, int c) --> class sum = new class(5,10,15); when calling a specific method you'll know which 
behavior which will be executed.

method overloading is when you have 2 or more methods in the same class with the same exact name but with different 
numbers or types of parameters

overloading is achieved by passing different number parameters or types or parameters

operator overloading (+)
with strings -> behaves as concatenation operator
with numbers -> behaves as a math operator

public access modifier
void - return type
add(int num1, String str) - method + parameters = method signature
in method overloading method signature must always be different



Runtime time/dynamic binding/late binding/method overriding


public access modifier
void - return type
add(int num1, int num2) - method + parameters = method signature
in method overriding method signature and return type must always be same!

Method OVERRIDING - same method exist with Super class and Subclass

Runtime polymorphism can be achieved by method overriding

What is method overriding?
the method of superclass is OVERRIDDEN in the subclass to provide more specific implementation.
Whenever same method name exists in the base class and derived class with same types of parameters.
Without inheritance method overriding is not possible.

Rules for Method Overriding 
1. Inheritance is a must
2. Method signatures and return type must be the same

When to go for method overriding?
When we want to implement our own methods/behaviors. 

pros: 
if not satisfied with the parent class method, you can implement your own.

DYNAMIC BINDING: the process of binding appropriate versions(overridden method) of derived classes 
which are inherited from base class with base class object is known as dynamic binding.

TypeCasting in Java:
Implicit/Widening/Auto
Explicit/Narrowing/Manually

Primitives: byte->short->int->long->float->double

Non Primitives -> String

runtime polymorphism, when creating an object of the child class and giving 
reference to parent class and then accessing the method
during compilation, COMPILER looks at parent/reference type class and checks 
if method is available in parent in class and during runtime jvm will check, jvm executes the code
during the runtime, jvm will go to child class first and then sees that method available
creating an obj of child and check if method is available within child class, thats what it will execute.
		
		
runtime polymorphism is achieved through method overriding 
create obj of child class and give reference to parent class
now thru the reference variable we are accessing methods that applicable only for referring type
during runtime jvm will search for runtime obj and based on obj specific methods will get executed.
		
When overriding we cannot reduce visibility of a method

public -> protected -> default -> private does not participate in inheritance

METHOD OVERRIDING:
1. Inheritance is a must!
2. Method signatures (name and parameters) and return type MUST BE THE SAME!
3. Access modifiers cannot be reduced but can be increased
4. Static methods cannot be overridden, its hidden
5. Constructors cannot be overridden
6. Private methods cannot be overridden

Final with:
variables -> makes variable a constant value, cant change the value of that variable in that code

methods -> it prevents the method overriding process, final methods cant be overridden in the child class

classes - > prevents inheritance, class defined as final cant have any subclasses

Method Overloading VS Method Overriding

OL - same method name but with different parameters in the same class. method signature must be different
OR - return type, method signature, method name, and parameters must be the same in the order
OL - return type can be different
OR - return type must be the same
OL - does not need inheritance
OR - inheritance is a must
OL - static, final, and private methods can be overloaded
OR - static, final, and private methods can not be overridden
OL - constructors can be over loaded
OR - constructors cant be overridden bc it does not participate in inheritance, constructors 
must have the same name as the class
OL - no restrictions on access modifiers
OR - the scope/visibility of the access modifier can't be reduced, can be same or increased





local variables needs to be initialized not instance variables
