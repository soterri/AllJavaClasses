Map -an interface, a collection of ENTRY objects using a key+value pair makes an entry object and map is not 
apart of the Collection Framework although the concepts are based on the 
collections framework. Map has its own methods to manipulate data with.

Map is a collection of entry objects. k + v pair.

Why do we need Map?
We need a Map in Java to store key-value pairs, which allows for fast lookup, 
association, and retrieval of data based on a unique key.

What is a Map?
A Map<K, V> is a Java interface where:

Each key maps to exactly one value.

Keys must be unique, but values can be duplicated.

Think of it like a dictionary:

You look up the word (key) to get the definition (value).

✅ Why Use a Map?
1. Fast Data Lookup
Instead of searching through a list, you can instantly retrieve a value using a key.

Map<String, String> capitals = new HashMap<>();
capitals.put("USA", "Washington D.C.");
capitals.get("USA"); // returns "Washington D.C."

2. Associating Related Data
You can link two pieces of information:

Map<Integer, String> studentIdToName = new HashMap<>();
studentIdToName.put(123, "Alice");
studentIdToName.put(456, "Bob");
➡️ Here, you're mapping a student ID to a student name.

3. Avoiding Duplicates
Keys are unique.

If you insert a new value with the same key, it overwrites the old one.

4. Efficient Storage
HashMap provides O(1) average time for put and get.

TreeMap maintains sorted keys for ordered data.

LinkedHashMap maintains insertion order.

🔧 Common Use Cases:
Use Case	Example
Lookup table	Country → Capital
Counting items	Word → Frequency
Caching	UserID → UserData
Grouping data	Department → List of Employees
Translating keys	English word → French translation

🔍 Map vs List vs Set
Feature	Map	List	Set
Stores	Key → Value pairs	Ordered elements	Unique elements
Keys	Unique	Not used	N/A
Values	Duplicates allowed	Duplicates allowed	Duplicates NOT allowed
Fast lookup	✅ (by key)	❌ (must search)	✅ (in HashSet)

🧪 Example
Map<String, Integer> wordCount = new HashMap<>();
wordCount.put("apple", 3);
wordCount.put("banana", 2);
System.out.println(wordCount.get("apple")); // 3


Classes that implement the Map interface: 4 implementation classes:
HashMap - stores k,v objects, map in which order is not maintained, allowed to have 1 null key and multiple null values

LinkedHashMap -  stores k,v objects, ordered collection, no duplicates, allowed to have 1 null key and multiple null values

TreeMap - map in which key objects will be stored in ascending order, no null keys allowed, but can have multiple null values

HashTable - synchronized and out dated. does not preserve the order, can not have null keys or null values

to store -- .PUT(K, V)

to retrieve -- .GET

To retrieve all keys 
.keySet(); - returns a collection/set of all keys from the map(keys must be unique)

To retrieve all values
.values(); returns a collection of values (values can be duplicate and they are not ordered).

entrySet(); -> a collection of entry objects
to get an entry object  - we need to call the method entrySet(); --> a set of entry objects

entry will have methods
.getKey - returns key object
.getValue - returns value object

CANNOT have duplicate KEYS! Keys must always be unique

